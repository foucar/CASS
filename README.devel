CASS developer notes
====================

These are some guidelines for the CASS software development.

* Prefer standard language features (including the C++ standard library and TR1)
  over external libraries. If you don't, please document your decision.

* Favor initialization over assignment
  (because initialization will always occur).

* Please document the code using inline comments on implementation
  details and doxygen comments for interfaces and implementation choices:

  /** short description title.
   * detailed description
   * parameters and return values using @param and @return.
   */

   or

   /** short description title
    *
    * detailed description
    *
    * parameters and return values using @param and @return.
    */
  Do not duplicate the code in the comment, augment it!

* Do not bloat the code (implementation) by useless empty lines,
  comments without content (i.e., essentially duplicating the code),
  etc.
  But please do structure/document header files well

* Please keep the indentation style consistent. Generally, indentation
  should be 2 spaces. Indent whenever a curly bracket opens a block.
  Do not use tabs, use spaces instead!
  (Define the indentation style for Emacs users in the Local Variables
  list for automatic indentation.)


Software repository
-------------------

* Please commit often and keep the changes small.

* Push the code into descriptive branches, so that they can be reviewed by the
  principle developer to be merged to master.

* One can check into tmp/branchname. If you need write access to other branches
  ask the principle developer.

* Make sure the pushed code compiles.
  - if you made changes to the project, so that it will probably
    not compile for the other users, write a detailed description
    what one has to do in order to compile again to the cass
    mailinglist and into the INSTALL file.

* Please provide details on your changes in the commit message.
