/**
@section using Using CASS
CASS is capable of running online and get the data from the LCLS datastream and
offline when it gets the data from the xtc files written by the LCLS DAQ.
Depending on the settings during compiletime one can compile CASS for either
online or offline mode. Please see @ref compiling for details.\n
A complete list of all parameters can be found here @ref clpar. Some of the
parameters are only working with the online version some of them only with the
offline version of CASS.


@subsection online Online
Running cass online envolves that you use the shared memory acess to the data
provided by LCLS. This access is only available on selected dedicated computers.
For the AMO-Hutch this is "daq-amo-mon01" ... "daq-amo-mon04". Please ask the
LCLS DAQ person on which machine you will have access to the the online data
stream.\n
When starting the online CASS program you need to tell it where to find the
shared memory that has been preset by the DAQ people. (One can list the files
in /dev/shm to see which shared memroy tags have been set up). The shared
memory tag will told to the program with the
- p partition tag for accessing the shared memory
parameter. If more than one person is running on the same machine trying to get
the data from the online stream it is possible to assing an id to each one with
the
- c client id for shared memory access
parameter.
With the
- s TCP port of the soap server
parameter you tell the program on which port the cass histograms are provided to
the viewers. See @ref viewers for details on how to use this parameter in the
viewer.
The
- f optional complete path to the cass.ini to use
parameter lets you choose which .ini file to use. Please see @ref inifilesetup
for details of the contents of the .ini file. If this paramter is not set CASS
will defaultly load CASS.ini that resides in the UserScope path. On Unix or Mac
OS X this is $HOME/.config or $HOME/Settings.ÃŸn
A typical program start command looks like this:\
"./cass -p 0_1_cass_AMO -c 0 -f "inifilename""\n
For your convenience the most recent cass binary is located in\n
"/reg/g/cass/bin/"\n
In this location you will also find the convenience startup scripts. The one that
loads cass with the paramters described in the example above is called
"/reg/g/cass/bin/startCASS.sh"



@subsection offline Offline
The offline version of CASS will process the xtc file that were recorded by the
LCLS DAQ. Please put all files that you want to process into a txt file. Then
provide the name of the text file to CASS with the
- i filename containing filesnames of xtcfiles to process
parameter.\n
Usually CASS will not quit after it has finishes processing all the files. It
will keep all histograms in memory to be accessable via the viewers. If you would
like CASS to quit after it has processed all provided files you have to pass the
- q quit after finished with all files
paramter to CASS at the program start.\n
Sometimes you don't want to have all the rate output, ie. when you run
the program in a batched way on a cluster. You can suppress the output with the
- r suppress the rate output
parameter.\n
Some of the available postprocessors output the data to file. This is done in
different ways. You can check theier description if you want to know how. For
most of them you need to compile cass with the proper options. In order to tell
the program to which filename to output the files the
- o output filename passed to the postprocessor
parameter is available.



@subsection viewer The Viewers
To look at the histograms that are created and filled by CASS one has two
options.@ref jocassview and @ref lucassview. Both viewers need to be told on
which server CASS is running and on which port it will listen for requests.



@subsubsection jocassview Jocassview
This viewer is based on QWT. A library for scientific widgets that are based on
QT. To start this viewer on the SLAC computers one has to tell where to find
the QWT library by first putting it to the LD_LIBRARY_PATH variable. IE.\n

export LD_LIBRARY_PATH=/reg/g/cass/lib
./jocassview



@subsubsection lucassview Lucassview
This viewer is based on ROOT which was developed by CERN people and is a C++
library for all kinds of things. To start this viewer on the SLAC computers one
has to set PATH and LD_LIBRARY_PATH to point to the binary and the library path
of the root installation. IE.\n

export ROOTSYS=/reg/common/package/root/5.24.00-x86_64-nodebug\n
export PATH=$ROOTSYS/bin:$PATH\n
export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH\n
./lucassview\n

@subsection inifilesetup
CASS is designed in such a way that it has a lot of "lego" pieces that one can
put together such that it is process the data as you want it. These "lego"
pieces are called "PostProcessors". In order to understand the concept behind
this one needs to know how CASS is working. Here is a short overview of the
program flow:\n
for each event do
- receive an event containing all data from either the xtc file (offline) or the
  shared memory.
- pic out the information we are interested in (Converters)
- preprocess parts of the data (PreAnalyzer)
- postprocess the data using the PostProcessors

So the ini file exist of basically three parts:\n

The Converter part tells CASS what kind of data you are actually interested in.
To see what options are available please refer to @ref converter.

The PreAnalyzer part will preprocess the only the pnCCD and the ccd data. Please
refer to @ref preanalyzer for details how to tell which pre analyzers should be
active. The parameters you can set for the different pre analyzers can be found
in the description of cass::pnCCD::DetectorParameter and cass::pnCCD::Parameter
for the pnCCD pre analysis. For the commercial ccd pre analysis the paramters
can be found in the description of cass::CCD::Parameter.\n

The PostProcessor part is the most advanced part. #ref pplist gives an overview
of all available postprocessors. In the parenthesis you can find for which
postprocessor to look in the parameter list @ref CASSParameters to find out the
parameters it takes. In this reference you will also find all available
parameters that one can give in the .ini file. There are some examples given in
@ref examples as a starting point for your .ini file.

@subsubsection acqirisparamters The special Acqiris Detector Parameters
If you want to use the PostProcessors that deal with the AcqirisDetectors you
need to set up the AcqirisDetectors first. Basically there are two types of
Acqiris Detectors:
- Time of Flight detectors (ToF)
- Delayline detectors (DLD)
where the Delayline detectors are just specialized Time of Flight detectors. So
everything that a Time of Flight detector can do, also a Delayline detector will
do, but more. Basically the concept behind these detectors is that a ToF detector
has a SignalProducer which is called MCP. The SignalProducer contains a
SingalExtractor that knows where to find the signals in the data and how to
extract them from there. The parameter "SignalExtractionMethod" lets you choose
what kind of SignalExtractor should be used to extract the signals from the
data. Please refer to the specific SignalExtrator that you choose to use for the
parameters that available for it.

Next to an MCP SignalProducer the DLD has also Anodelayers which contain wireends
which themselves are again SignalProducers. So one can set up how to extract the
produces signals from the wireends SignalProducers as described for the MCP
SignalProducer. To be able to convert or resort the Signals produces by the MCP
and the wireends of a DLD to actual hits on the detector the DLD also contains
a DetectorAnalyzer object. There are several ways to sort the signals into
detectorhits. You can choose which one of these methods you want to use with the
"AnalysisMethod" parameter. Please refer to the description of the specific
DetectorAnalyzer to see what parameters are available.

Once you have set up the DLD to identify hits on it you can tell it what
kind of Particle these hits belong to. Therefore one can setup a list of particles
that were detected by the DLD. There are several ways of idenfiying which hit
belongs to which particle. You can choose which one to use the "ConditionType"
parameter of the particle to define which method to use. For the other parameters
available for a particle please refer to the documentation of
cass::ACQIRIS::Particle. In order to calculate the momenta and energy of the
particle each particle contains a cass cass::ACQIRIS::Spectrometer object. You
need to set up this object for each particle individually. Based on the paramters
you provide the particle will decide which method it will use to calculate the
momentum. In this the raw values of the detectorhit are taken and corrected
using a cass::ACQIRIS::HitCorrector object. Please refer to the documentation
of the HitCorrector object to see which parameters are available.

How to set up one of these detectors you can find in the class
documentation of cass::ACQIRIS::DelaylineDetector, cass::ACQIRIS::AnodeLayer and
cass::ACQIRIS::SignalProducer.



@subsection getting_help Getting Help
If you need further assistence please subscripe yourself to the cass-mailinglist.\n
https://www.asg.mpg.de/mailman/listinfo/cass\n
Where people should share theier experience and user are helping other users
to solve their problems.
*/

