/**
@page developer Developer information

CASS has two basic parts the input and analyze. Where the input part gets the data
from either file or shared memory and the analyze part will analyze the data.
Both of them are threaded, where the input is always just one thread and the
analyze part consists of more threads. The linkage between the input threads
and the analysis thread is done by cass::RingBuffer. This is a buffer that
contains the amount of cass::CASSEvent elements that can be chosen by setting
cass::RingBufferSize. It allows to retrieve elements that should be filled with
new data and elements whos contents should be analyzed.


@section input Input part of CASS
Both inputs will do the follwing tasks after they retrieved the data from LCLS:
- get fillable (empty) cass::CASSEvent element from cass::RingBuffer
- convert LCLS data to cass::CASSEvent data and fill the later with the data
- put cass::CASSEvent back into cass::Ringbuffer

To convert the data the cass::FormatConverter singleton is used. This will
iterate through the LCLS datagram and call the right cass::ConversionBackend
object that will convert the xtc data to cass::CASSEvent data. The user can
select what part of the data he wants to have converted by setting up which
converters he wants to use. Please refer to the documentation of
cass::FormatConverter and the converters for details.

@section offline_input Offline input of CASS
The input part that will read the data from file in offline mode is handled by
the class cass::FileInput. This just parses the input file containing the file
names to analyze, put them into string list and then goes through that list.
For each file it will retrieve an event and convert the data to cass::CASSEvent
object. The later was retrieved from the cass::RingBuffer and then later put back
into it.


@section online_input Online input of CASS
In the online mode the input part will read the data from the LCLS shared memory.
The class that does that is cass::SharedMemoryInput. It derives from the
Pds::XtcMonitorClient class provided by LCLS. This class will do all the
communication between the shared memory and CASS. Once it retrieved new data
(in LCLS speach this is called datagram) it will call the overwritten
cass::SharedMemoryInput::processDgram() member. Here the datagram will be
converted to a cass::CASSEvent which is retrieved from the cass::RingBuffer
before. After that it is put back into the cass::RingBuffer.



@section analysis Analysis part of CASS
The analysis part is done by multiple threads. One can say how many analysis
threads should be present by modifying the cass::NbrOfWorkers variable. Each
analysis thread is a cass::Worker object, which are handled by the cass::Workers
object. Each one of the cass::Worker objects will do the following until it is
told to quit:
- retrieve an analysable (non empty) cass::CASSEvent element from cass::RingBuffer
- pre analyze the cass::CASSEvent element using the cass::Analyzer singleton
- post analyze the cass::CASSEvent element using the cass::PostProcessors
  singleton.
- put the event back to the ringbuffer to be refilled again.

The cass::Analyzer singleton will pass the cass event to all user selected pre
analyzers to pre process the data. The cass::PostProcessor will pass the event
to all user defined postprocessors the be postprocessed. For further details on
how to select what postprocessors should run please see section @ref inifilesetup.
Further details about the analyzers can be found in the documentation of
cass::Analyzer and the analyzers it handles.

@section communication Communicating with CASS
CASS is using SOAP to communicate with the viewers. The class that handles these
communication is cass::SoapServer. It uses a cass::HistogramGetter object to
retrieve an requested histogram from the available postprocessors.



@section addnew Adding new functionality to CASS

@section newpp How to add a new PostProcessor
derive from cass::PostprocessorBackend
make sure to set up load settings, create histogram and histogram list from there
, make sure you do the right thing when dependency is resized. Make sure you
lock the resources.
helper memeber function to set up general parameters, dependencies and conditions.

add entrie in postprocessors header and class in list of create()


@section newcon How to add a new Converter
converter class inerhit from cass::ConversionBackend.
in constructor needs to setup ids it works on
add it to converter::instance
modify description in cass::FormatConverter header.
*/
