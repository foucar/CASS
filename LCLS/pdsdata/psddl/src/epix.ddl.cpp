
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/epix.ddl.h"

#include <iostream>
namespace Pds {
namespace Epix {
//AsicConfigV1::AsicConfigV1(uint8_t arg__monostPulser, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint16_t arg__pulser, uint8_t arg__pbit, uint8_t arg__atest, uint8_t arg__test, uint8_t arg__sabTest, uint8_t arg__hrTest, uint8_t arg__digMon1, uint8_t arg__digMon2, uint8_t arg__pulserDac, uint8_t arg__Dm1En, uint8_t arg__Dm2En, uint8_t arg__slvdSBit, uint8_t arg__VRefDac, uint8_t arg__TpsTComp, uint8_t arg__TpsMux, uint8_t arg__RoMonost, uint8_t arg__TpsGr, uint8_t arg__S2dGr, uint8_t arg__PpOcbS2d, uint8_t arg__Ocb, uint8_t arg__Monost, uint8_t arg__FastppEnable, uint8_t arg__Preamp, uint8_t arg__PixelCb, uint8_t arg__S2dTComp, uint8_t arg__FilterDac, uint8_t arg__TC, uint8_t arg__S2d, uint8_t arg__S2dDacBias, uint8_t arg__TpsTcDac, uint8_t arg__TpsDac, uint8_t arg__S2dTcDac, uint8_t arg__S2dDac, uint8_t arg__TestBe, uint8_t arg__IsEn, uint8_t arg__DelExec, uint8_t arg__DelCckReg, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColStartAddr, uint8_t arg__ColStopAddr, uint16_t arg__chipID)
//    : _reg1(((arg__monostPulser) & 0x7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)), _reg3(((arg__pulser) & 0x3ff)|(((arg__pbit) & 0x1)<<10)|(((arg__atest) & 0x1)<<11)|(((arg__test) & 0x1)<<12)|(((arg__sabTest) & 0x1)<<13)|(((arg__hrTest) & 0x1)<<14)), _reg4(((arg__digMon1) & 0xf)|(((arg__digMon2) & 0xf)<<4)), _reg5(((arg__pulserDac) & 0x7)), _reg6(((arg__Dm1En) & 0x1)|(((arg__Dm2En) & 0x1)<<1)|(((arg__slvdSBit) & 0x1)<<4)), _reg7(((arg__VRefDac) & 0x3f)), _reg8(((arg__TpsTComp) & 0x1)|(((arg__TpsMux) & 0xf)<<1)|(((arg__RoMonost) & 0x7)<<5)), _reg9(((arg__TpsGr) & 0xf)|(((arg__S2dGr) & 0xf)<<4)), _reg10(((arg__PpOcbS2d) & 0x1)|(((arg__Ocb) & 0x7)<<1)|(((arg__Monost) & 0x7)<<4)|(((arg__FastppEnable) & 0x1)<<7)), _reg11(((arg__Preamp) & 0x7)|(((arg__PixelCb) & 0x7)<<4)), _reg12(((arg__S2dTComp) & 0x1)|(((arg__FilterDac) & 0x3f)<<1)), _reg13(((arg__TC) & 0x3)|(((arg__S2d) & 0x7)<<2)|(((arg__S2dDacBias) & 0x7)<<5)), _reg14(((arg__TpsTcDac) & 0x3)|(((arg__TpsDac) & 0x3f)<<2)), _reg15(((arg__S2dTcDac) & 0x3)|(((arg__S2dDac) & 0x3f)<<2)), _reg16(((arg__TestBe) & 0x1)|(((arg__IsEn) & 0x1)<<1)|(((arg__DelExec) & 0x1)<<2)|(((arg__DelCckReg) & 0x1)<<3)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColStartAddr) & 0x7f)), _reg20(((arg__ColStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff))
//{
//}
//ConfigV1::ConfigV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__lastRowExclusions, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, const Epix::AsicConfigV1* arg__asics, const uint32_t* arg__asicPixelTestArray, const uint32_t* arg__asicPixelMaskArray)
//    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _lastRowExclusions(arg__lastRowExclusions), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask)
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 112;
//    Epix::AsicConfigV1* data = reinterpret_cast<Epix::AsicConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelTestArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32))) {
//    ptrdiff_t offset = 112+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelTestArray, arg__asicPixelTestArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)), data);
//  }
//  if (arg__asicPixelMaskArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32))) {
//    ptrdiff_t offset = (112+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(4*(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)));
//    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelMaskArray, arg__asicPixelMaskArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)), data);
//  }
//}
std::vector<int>
ConfigV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
//Asic10kConfigV1::Asic10kConfigV1(uint8_t arg__CompTH_DAC, uint8_t arg__CompEn_0, uint8_t arg__PulserSync, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint8_t arg__dummyG, uint8_t arg__dummyGA, uint16_t arg__dummyUpper12bits, uint16_t arg__pulser, uint8_t arg__pbit, uint8_t arg__atest, uint8_t arg__test, uint8_t arg__sabTest, uint8_t arg__hrTest, uint8_t arg__PulserR, uint8_t arg__digMon1, uint8_t arg__digMon2, uint8_t arg__pulserDac, uint8_t arg__monostPulser, uint8_t arg__CompEn_1, uint8_t arg__CompEn_2, uint8_t arg__Dm1En, uint8_t arg__Dm2En, uint8_t arg__emph_bd, uint8_t arg__emph_bc, uint8_t arg__VRefDac, uint8_t arg__VrefLow, uint8_t arg__TpsTComp, uint8_t arg__TpsMux, uint8_t arg__RoMonost, uint8_t arg__TpsGr, uint8_t arg__S2dGr, uint8_t arg__PpOcbS2d, uint8_t arg__Ocb, uint8_t arg__Monost, uint8_t arg__FastppEnable, uint8_t arg__Preamp, uint8_t arg__PixelCb, uint8_t arg__Vld1_b, uint8_t arg__S2dTComp, uint8_t arg__FilterDac, uint8_t arg__testVDTransmitter, uint8_t arg__TC, uint8_t arg__S2d, uint8_t arg__S2dDacBias, uint8_t arg__TpsTcDac, uint8_t arg__TpsDac, uint8_t arg__S2dTcDac, uint8_t arg__S2dDac, uint8_t arg__TestBe, uint8_t arg__IsEn, uint8_t arg__DelExec, uint8_t arg__DelCckReg, uint8_t arg__RO_rst_en, uint8_t arg__slvdSBit, uint8_t arg__FELmode, uint8_t arg__CompEnOn, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColStartAddr, uint8_t arg__ColStopAddr, uint16_t arg__chipID)
//    : _reg1(((arg__CompTH_DAC) & 0x3f)|(((arg__CompEn_0) & 0x1)<<6)|(((arg__PulserSync) & 0x1)<<7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)|(((arg__dummyG) & 0x1)<<2)|(((arg__dummyGA) & 0x1)<<3)|(((arg__dummyUpper12bits) & 0xfff)<<4)), _reg3(((arg__pulser) & 0x3ff)|(((arg__pbit) & 0x1)<<10)|(((arg__atest) & 0x1)<<11)|(((arg__test) & 0x1)<<12)|(((arg__sabTest) & 0x1)<<13)|(((arg__hrTest) & 0x1)<<14)|(((arg__PulserR) & 0x1)<<15)), _reg4(((arg__digMon1) & 0xf)|(((arg__digMon2) & 0xf)<<4)), _reg5(((arg__pulserDac) & 0x7)|(((arg__monostPulser) & 0x7)<<3)|(((arg__CompEn_1) & 0x1)<<6)|(((arg__CompEn_2) & 0x1)<<7)), _reg6(((arg__Dm1En) & 0x1)|(((arg__Dm2En) & 0x1)<<1)|(((arg__emph_bd) & 0x7)<<2)|(((arg__emph_bc) & 0x7)<<5)), _reg7(((arg__VRefDac) & 0x3f)|(((arg__VrefLow) & 0x3)<<6)), _reg8(((arg__TpsTComp) & 0x1)|(((arg__TpsMux) & 0xf)<<1)|(((arg__RoMonost) & 0x7)<<5)), _reg9(((arg__TpsGr) & 0xf)|(((arg__S2dGr) & 0xf)<<4)), _reg10(((arg__PpOcbS2d) & 0x1)|(((arg__Ocb) & 0x7)<<1)|(((arg__Monost) & 0x7)<<4)|(((arg__FastppEnable) & 0x1)<<7)), _reg11(((arg__Preamp) & 0x7)|(((arg__PixelCb) & 0x7)<<3)|(((arg__Vld1_b) & 0x3)<<6)), _reg12(((arg__S2dTComp) & 0x1)|(((arg__FilterDac) & 0x3f)<<1)|(((arg__testVDTransmitter) & 0x1)<<7)), _reg13(((arg__TC) & 0x3)|(((arg__S2d) & 0x7)<<2)|(((arg__S2dDacBias) & 0x7)<<5)), _reg14(((arg__TpsTcDac) & 0x3)|(((arg__TpsDac) & 0x3f)<<2)), _reg15(((arg__S2dTcDac) & 0x3)|(((arg__S2dDac) & 0x3f)<<2)), _reg16(((arg__TestBe) & 0x1)|(((arg__IsEn) & 0x1)<<1)|(((arg__DelExec) & 0x1)<<2)|(((arg__DelCckReg) & 0x1)<<3)|(((arg__RO_rst_en) & 0x1)<<4)|(((arg__slvdSBit) & 0x1)<<5)|(((arg__FELmode) & 0x1)<<6)|(((arg__CompEnOn) & 0x1)<<7)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColStartAddr) & 0x7f)), _reg20(((arg__ColStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff))
//{
//}
//Config10KV1::Config10KV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__DoutPipelineDelay, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__lastRowExclusions, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::Asic10kConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray)
//    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _DoutPipelineDelay(arg__DoutPipelineDelay), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _lastRowExclusions(arg__lastRowExclusions), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 136;
//    Epix::Asic10kConfigV1* data = reinterpret_cast<Epix::Asic10kConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelConfigArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow())))) {
//    ptrdiff_t offset = 136+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()))), data);
//  }
//}
std::vector<int>
Config10KV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
//Asic100aConfigV1::Asic100aConfigV1(uint8_t arg__pulserVsPixelOnDelay, uint8_t arg__pulserSync, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint16_t arg__testPulserLevel, uint8_t arg__pulserCounterDirection, uint8_t arg__automaticTestModeEnable, uint8_t arg__testMode, uint8_t arg__testModeWithDarkFrame, uint8_t arg__highResolutionModeTest, uint8_t arg__pulserReset, uint8_t arg__digitalMonitorMux1, uint8_t arg__digitalMonitorMux2, uint8_t arg__testPulserCurrent, uint8_t arg__testPointSystemOutputDynamicRange, uint8_t arg__digitalMonitor1Enable, uint8_t arg__digitalMonitor2Enable, uint8_t arg__LVDS_ImpedenceMatchingEnable, uint8_t arg__VRefBaseLineDac, uint8_t arg__extraRowsLowReferenceValue, uint8_t arg__testPointSystemTemperatureCompensationEnable, uint8_t arg__testPointSytemInputSelect, uint8_t arg__programmableReadoutDelay, uint8_t arg__outputDriverOutputDynamicRange0, uint8_t arg__outputDriverOutputDynamicRange1, uint8_t arg__balconyEnable, uint8_t arg__balconyDriverCurrent, uint8_t arg__fastPowerPulsingSpeed, uint8_t arg__fastPowerPulsingEnable, uint8_t arg__preamplifierCurrent, uint8_t arg__pixelOutputBufferCurrent, uint8_t arg__pixelBufferAndPreamplifierDrivingCapabilities, uint8_t arg__outputDriverTemperatureCompensationEnable, uint8_t arg__pixelFilterLevel, uint8_t arg__bandGapReferenceTemperatureCompensationBits, uint8_t arg__outputDriverDrivingCapabilitiesAndStability, uint8_t arg__outputDriverDacReferenceBias, uint8_t arg__testPointSystemTemperatureCompensationGain, uint8_t arg__testPointSystemInputCommonMode, uint8_t arg__outputDriverTemperatureCompensationGain0, uint8_t arg__outputDriverInputCommonMode0, uint8_t arg__testBackEnd, uint8_t arg__interleavedReadOutEnable, uint8_t arg_EXEC_DelayEnable, uint8_t arg__CCK_RegDelayEnable, uint8_t arg__syncPinEnable, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColumnStartAddr, uint8_t arg__ColumnStopAddr, uint16_t arg__chipID, uint8_t arg__outputDriverOutputDynamicRange2, uint8_t arg__outputDriverOutputDynamicRange3, uint8_t arg__outputDriverTemperatureCompensationGain1, uint8_t arg__outputDriverInputCommonMode1, uint8_t arg__outputDriverTemperatureCompensationGain2, uint8_t arg__outputDriverInputCommonMode2, uint8_t arg__outputDriverTemperatureCompensationGain3, uint8_t arg__outputDriverInputCommonMode3)
//    : _reg1(((arg__pulserVsPixelOnDelay) & 0x7)|(((arg__pulserSync) & 0x1)<<7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)), _reg3(((arg__testPulserLevel) & 0x3ff)|(((arg__pulserCounterDirection) & 0x1)<<10)|(((arg__automaticTestModeEnable) & 0x1)<<11)|(((arg__testMode) & 0x1)<<12)|(((arg__testModeWithDarkFrame) & 0x1)<<13)|(((arg__highResolutionModeTest) & 0x1)<<14)|(((arg__pulserReset) & 0x1)<<15)), _reg4(((arg__digitalMonitorMux1) & 0xf)|(((arg__digitalMonitorMux2) & 0xf)<<4)), _reg5(((arg__testPulserCurrent) & 0x7)|(((arg__testPointSystemOutputDynamicRange) & 0xf)<<4)), _reg6(((arg__digitalMonitor1Enable) & 0x1)|(((arg__digitalMonitor2Enable) & 0x1)<<1)|(((arg__LVDS_ImpedenceMatchingEnable) & 0x1)<<4)), _reg7(((arg__VRefBaseLineDac) & 0x3f)|(((arg__extraRowsLowReferenceValue) & 0x3)<<6)), _reg8(((arg__testPointSystemTemperatureCompensationEnable) & 0x1)|(((arg__testPointSytemInputSelect) & 0xf)<<1)|(((arg__programmableReadoutDelay) & 0x7)<<5)), _reg9(((arg__outputDriverOutputDynamicRange0) & 0xf)|(((arg__outputDriverOutputDynamicRange1) & 0xf)<<4)), _reg10(((arg__balconyEnable) & 0x1)|(((arg__balconyDriverCurrent) & 0x7)<<1)|(((arg__fastPowerPulsingSpeed) & 0x7)<<4)|(((arg__fastPowerPulsingEnable) & 0x1)<<7)), _reg11(((arg__preamplifierCurrent) & 0x7)|(((arg__pixelOutputBufferCurrent) & 0x7)<<3)|(((arg__pixelBufferAndPreamplifierDrivingCapabilities) & 0x3)<<6)), _reg12(((arg__outputDriverTemperatureCompensationEnable) & 0x1)|(((arg__pixelFilterLevel) & 0x3f)<<1)), _reg13(((arg__bandGapReferenceTemperatureCompensationBits) & 0x3)|(((arg__outputDriverDrivingCapabilitiesAndStability) & 0x7)<<2)|(((arg__outputDriverDacReferenceBias) & 0x7)<<5)), _reg14(((arg__testPointSystemTemperatureCompensationGain) & 0x3)|(((arg__testPointSystemInputCommonMode) & 0x3f)<<2)), _reg15(((arg__outputDriverTemperatureCompensationGain0) & 0x3)|(((arg__outputDriverInputCommonMode0) & 0x3f)<<2)), _reg16(((arg__testBackEnd) & 0x1)|(((arg__interleavedReadOutEnable) & 0x1)<<1)|(((arg_EXEC_DelayEnable) & 0x1)<<2)|(((arg__CCK_RegDelayEnable) & 0x1)<<3)|(((arg__syncPinEnable) & 0x1)<<4)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColumnStartAddr) & 0x7f)), _reg20(((arg__ColumnStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff)), _reg22(((arg__outputDriverOutputDynamicRange2) & 0xf)|(((arg__outputDriverOutputDynamicRange3) & 0xf)<<4)), _reg23(((arg__outputDriverTemperatureCompensationGain1) & 0x3)|(((arg__outputDriverInputCommonMode1) & 0x3f)<<2)), _reg24(((arg__outputDriverTemperatureCompensationGain2) & 0x3)|(((arg__outputDriverInputCommonMode2) & 0x3f)<<2)), _reg25(((arg__outputDriverTemperatureCompensationGain3) & 0x3)|(((arg__outputDriverInputCommonMode3) & 0x3f)<<2))
//{
//}
//Config100aV1::Config100aV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicPPmatToReadout, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfReadableRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__calibrationRowCountPerASIC, uint32_t arg__environmentalRowCountPerASIC, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::Asic100aConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray, const uint8_t* arg__calibPixelConfigArray)
//    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicPPmatToReadout(arg__asicPPmatToReadout), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfReadableRowsPerAsic(arg__numberOfReadableRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _calibrationRowCountPerASIC(arg__calibrationRowCountPerASIC), _environmentalRowCountPerASIC(arg__environmentalRowCountPerASIC), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 144;
//    Epix::Asic100aConfigV1* data = reinterpret_cast<Epix::Asic100aConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelConfigArray and (( this->numberOfRows())*( this->numberOfColumns()))) {
//    ptrdiff_t offset = 144+(100*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(( this->numberOfRows())*( this->numberOfColumns())), data);
//  }
//  if (arg__calibPixelConfigArray and (( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow()))) {
//    ptrdiff_t offset = (144+(100*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(2*(( this->numberOfRows())*( this->numberOfColumns())));
//    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
//    std::copy(arg__calibPixelConfigArray, arg__calibPixelConfigArray+(( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow())), data);
//  }
//}
std::vector<int>
Config100aV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
//Config100aV2::Config100aV2(uint32_t arg__version, uint32_t arg__usePgpEvr, uint32_t arg__evrRunCode, uint32_t arg__evrDaqCode, uint32_t arg__evrRunTrigDelay, uint32_t arg__epixRunTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicPPmatToReadout, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint32_t arg__adcPipelineDelay0, uint32_t arg__adcPipelineDelay1, uint32_t arg__adcPipelineDelay2, uint32_t arg__adcPipelineDelay3, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__carrierId0, uint32_t arg__carrierId1, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfReadableRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__calibrationRowCountPerASIC, uint32_t arg__environmentalRowCountPerASIC, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint32_t arg__enableAutomaticRunTrigger, uint32_t arg__numberOf125MhzTicksPerRunTrigger, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::Asic100aConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray, const uint8_t* arg__calibPixelConfigArray)
//    : _version(arg__version), _usePgpEvr(arg__usePgpEvr), _evrRunCode(arg__evrRunCode), _evrDaqCode(arg__evrDaqCode), _evrRunTrigDelay(arg__evrRunTrigDelay), _epixRunTrigDelay(arg__epixRunTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicPPmatToReadout(arg__asicPPmatToReadout), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _adcPipelineDelay0(arg__adcPipelineDelay0), _adcPipelineDelay1(arg__adcPipelineDelay1), _adcPipelineDelay2(arg__adcPipelineDelay2), _adcPipelineDelay3(arg__adcPipelineDelay3), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _carrierId0(arg__carrierId0), _carrierId1(arg__carrierId1), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfReadableRowsPerAsic(arg__numberOfReadableRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _calibrationRowCountPerASIC(arg__calibrationRowCountPerASIC), _environmentalRowCountPerASIC(arg__environmentalRowCountPerASIC), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _enableAutomaticRunTrigger(arg__enableAutomaticRunTrigger), _numberOf125MhzTicksPerRunTrigger(arg__numberOf125MhzTicksPerRunTrigger), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 188;
//    Epix::Asic100aConfigV1* data = reinterpret_cast<Epix::Asic100aConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelConfigArray and (( this->numberOfRows())*( this->numberOfColumns()))) {
//    ptrdiff_t offset = 188+(100*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(( this->numberOfRows())*( this->numberOfColumns())), data);
//  }
//  if (arg__calibPixelConfigArray and (( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow()))) {
//    ptrdiff_t offset = (188+(100*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(2*(( this->numberOfRows())*( this->numberOfColumns())));
//    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
//    std::copy(arg__calibPixelConfigArray, arg__calibPixelConfigArray+(( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow())), data);
//  }
//}
std::vector<int>
Config100aV2::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
//AsicSConfigV1::AsicSConfigV1(uint8_t arg__pulserSync, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint16_t arg__testPulserLevel, uint8_t arg__pulserCounterDirection, uint8_t arg__automaticTestModeEnable, uint8_t arg__testMode, uint8_t arg__testModeWithDarkFrame, uint8_t arg__highResolutionModeTest, uint8_t arg__pulserReset, uint8_t arg__digitalMonitorMux1, uint8_t arg__digitalMonitorMux2, uint8_t arg__testPulserCurrent, uint8_t arg__pulserVsPixelOnDelay, uint8_t arg__digitalMonitor1Enable, uint8_t arg__digitalMonitor2Enable, uint8_t arg__inputLeakageCompensation, uint8_t arg__inputLeakageCompensationEnable, uint8_t arg__VRefBaseLineDac, uint8_t arg__extraRowsLowReferenceValue, uint8_t arg__testPointSystemTemperatureCompensationEnable, uint8_t arg__testPointSytemInputSelect, uint8_t arg__programmableReadoutDelay, uint8_t arg__testPointSystemOutputDynamicRange, uint8_t arg__outputDriverOutputDynamicRange, uint8_t arg__balconyEnable, uint8_t arg__balconyDriverCurrent, uint8_t arg__fastPowerPulsingSpeed, uint8_t arg__fastPowerPulsingEnable, uint8_t arg__preamplifierCurrent, uint8_t arg__pixelOutputBufferCurrent, uint8_t arg__pixelBufferAndPreamplifierDrivingCapabilities, uint8_t arg__outputDriverTemperatureCompensationEnable, uint8_t arg__pixelFilterLevel, uint8_t arg__bandGapReferenceTemperatureCompensationBits, uint8_t arg__outputDriverDrivingCapabilitiesAndStability, uint8_t arg__outputDriverDacReferenceBias, uint8_t arg__testPointSystemTemperatureCompensationGain, uint8_t arg__testPointSystemInputCommonMode, uint8_t arg__outputDriverTemperatureCompensationGain, uint8_t arg__outputDriverInputCommonMode, uint8_t arg__testBackEnd, uint8_t arg__interleavedReadOutEnable, uint8_t arg_EXEC_DelayEnable, uint8_t arg__CCK_RegDelayEnable, uint8_t arg__syncPinEnable, uint8_t arg__LVDS_ImpedenceMatchingEnable, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColumnStartAddr, uint8_t arg__ColumnStopAddr, uint16_t arg__chipID)
//    : _reg1((((arg__pulserSync) & 0x1)<<7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)), _reg3(((arg__testPulserLevel) & 0x3ff)|(((arg__pulserCounterDirection) & 0x1)<<10)|(((arg__automaticTestModeEnable) & 0x1)<<11)|(((arg__testMode) & 0x1)<<12)|(((arg__testModeWithDarkFrame) & 0x1)<<13)|(((arg__highResolutionModeTest) & 0x1)<<14)|(((arg__pulserReset) & 0x1)<<15)), _reg4(((arg__digitalMonitorMux1) & 0xf)|(((arg__digitalMonitorMux2) & 0xf)<<4)), _reg5(((arg__testPulserCurrent) & 0x7)|(((arg__pulserVsPixelOnDelay) & 0x7)<<3)), _reg6(((arg__digitalMonitor1Enable) & 0x1)|(((arg__digitalMonitor2Enable) & 0x1)<<1)|(((arg__inputLeakageCompensation) & 0x3)<<2)|(((arg__inputLeakageCompensationEnable) & 0x1)<<4)), _reg7(((arg__VRefBaseLineDac) & 0x3f)|(((arg__extraRowsLowReferenceValue) & 0x3)<<6)), _reg8(((arg__testPointSystemTemperatureCompensationEnable) & 0x1)|(((arg__testPointSytemInputSelect) & 0xf)<<1)|(((arg__programmableReadoutDelay) & 0x7)<<5)), _reg9(((arg__testPointSystemOutputDynamicRange) & 0xf)|(((arg__outputDriverOutputDynamicRange) & 0xf)<<4)), _reg10(((arg__balconyEnable) & 0x1)|(((arg__balconyDriverCurrent) & 0x7)<<1)|(((arg__fastPowerPulsingSpeed) & 0x7)<<4)|(((arg__fastPowerPulsingEnable) & 0x1)<<7)), _reg11(((arg__preamplifierCurrent) & 0x7)|(((arg__pixelOutputBufferCurrent) & 0x7)<<3)|(((arg__pixelBufferAndPreamplifierDrivingCapabilities) & 0x3)<<6)), _reg12(((arg__outputDriverTemperatureCompensationEnable) & 0x1)|(((arg__pixelFilterLevel) & 0x3f)<<1)), _reg13(((arg__bandGapReferenceTemperatureCompensationBits) & 0x3)|(((arg__outputDriverDrivingCapabilitiesAndStability) & 0x7)<<2)|(((arg__outputDriverDacReferenceBias) & 0x7)<<5)), _reg14(((arg__testPointSystemTemperatureCompensationGain) & 0x3)|(((arg__testPointSystemInputCommonMode) & 0x3f)<<2)), _reg15(((arg__outputDriverTemperatureCompensationGain) & 0x3)|(((arg__outputDriverInputCommonMode) & 0x3f)<<2)), _reg16(((arg__testBackEnd) & 0x1)|(((arg__interleavedReadOutEnable) & 0x1)<<1)|(((arg_EXEC_DelayEnable) & 0x1)<<2)|(((arg__CCK_RegDelayEnable) & 0x1)<<3)|(((arg__syncPinEnable) & 0x1)<<4)|(((arg__LVDS_ImpedenceMatchingEnable) & 0x1)<<5)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColumnStartAddr) & 0x7f)), _reg20(((arg__ColumnStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff))
//{
//}
//ConfigSV1::ConfigSV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicPPmatToReadout, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__carrierId0, uint32_t arg__carrierId1, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfReadableRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__calibrationRowCountPerASIC, uint32_t arg__environmentalRowCountPerASIC, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::AsicSConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray, const uint8_t* arg__calibPixelConfigArray)
//    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicPPmatToReadout(arg__asicPPmatToReadout), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _carrierId0(arg__carrierId0), _carrierId1(arg__carrierId1), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfReadableRowsPerAsic(arg__numberOfReadableRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _calibrationRowCountPerASIC(arg__calibrationRowCountPerASIC), _environmentalRowCountPerASIC(arg__environmentalRowCountPerASIC), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 152;
//    Epix::AsicSConfigV1* data = reinterpret_cast<Epix::AsicSConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelConfigArray and (( this->numberOfRows())*( this->numberOfColumns()))) {
//    ptrdiff_t offset = 152+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(( this->numberOfRows())*( this->numberOfColumns())), data);
//  }
//  if (arg__calibPixelConfigArray and (( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow()))) {
//    ptrdiff_t offset = (152+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(2*(( this->numberOfRows())*( this->numberOfColumns())));
//    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
//    std::copy(arg__calibPixelConfigArray, arg__calibPixelConfigArray+(( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow())), data);
//  }
//}
std::vector<int>
ConfigSV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
//Asic10kaConfigV1::Asic10kaConfigV1(uint8_t arg__CompTH_DAC, uint8_t arg__CompEn_lowBit, uint8_t arg__PulserSync, uint8_t arg__pixelDummy, uint16_t arg__Pulser, uint8_t arg__Pbit, uint8_t arg__atest, uint8_t arg__test, uint8_t arg__Sab_test, uint8_t arg__Hrtest, uint8_t arg__PulserR, uint8_t arg__DM1, uint8_t arg__DM2, uint8_t arg__Pulser_DAC, uint8_t arg__Monost_Pulser, uint8_t arg__CompEn_topTwoBits, uint8_t arg__DM1en, uint8_t arg__DM2en, uint8_t arg__emph_bd, uint8_t arg__emph_bc, uint8_t arg__VREF_DAC, uint8_t arg__VrefLow, uint8_t arg__TPS_tcomp, uint8_t arg__TPS_MUX, uint8_t arg__RO_Monost, uint8_t arg__TPS_GR, uint8_t arg__S2D0_GR, uint8_t arg__PP_OCB_S2D, uint8_t arg__OCB, uint8_t arg__Monost, uint8_t arg__fastPP_enable, uint8_t arg__Preamp, uint8_t arg__Pixel_CB, uint8_t arg__Vld1_b, uint8_t arg__S2D_tcomp, uint8_t arg__Filter_DAC, uint8_t arg__testLVDTransmitter, uint8_t arg__tc, uint8_t arg__S2D, uint8_t arg__S2D_DAC_Bias, uint8_t arg__TPS_tcDAC, uint8_t arg__TPS_DAC, uint8_t arg__S2D0_tcDAC, uint8_t arg__S2D0_DAC, uint8_t arg__testBE, uint8_t arg__is_en, uint8_t arg__DelEXEC, uint8_t arg__DelCCKreg, uint8_t arg__RO_rst_en, uint8_t arg__SLVDSbit, uint8_t arg__FELmode, uint8_t arg__CompEnOn, uint16_t arg__RowStart, uint16_t arg__RowStop, uint8_t arg__ColumnStart, uint8_t arg__ColumnStop, uint16_t arg__chipID, uint8_t arg__S2D1_GR, uint8_t arg__S2D2_GR, uint8_t arg__S2D3_GR, uint8_t arg__trbit, uint8_t arg__S2D1_tcDAC, uint8_t arg__S2D1_DAC, uint8_t arg__S2D2_tcDAC, uint8_t arg__S2D2_DAC, uint8_t arg__S2D3_tcDAC, uint8_t arg__S2D3_DAC)
//    : _reg1(((arg__CompTH_DAC) & 0x3f)|(((arg__CompEn_lowBit) & 0x1)<<6)|(((arg__PulserSync) & 0x1)<<7)), _reg2(((arg__pixelDummy) & 0xff)), _reg3(((arg__Pulser) & 0x3ff)|(((arg__Pbit) & 0x1)<<10)|(((arg__atest) & 0x1)<<11)|(((arg__test) & 0x1)<<12)|(((arg__Sab_test) & 0x1)<<13)|(((arg__Hrtest) & 0x1)<<14)|(((arg__PulserR) & 0x1)<<15)), _reg4(((arg__DM1) & 0xf)|(((arg__DM2) & 0xf)<<4)), _reg5(((arg__Pulser_DAC) & 0x7)|(((arg__Monost_Pulser) & 0x7)<<3)|(((arg__CompEn_topTwoBits) & 0x3)<<6)), _reg6(((arg__DM1en) & 0x1)|(((arg__DM2en) & 0x1)<<1)|(((arg__emph_bd) & 0x7)<<2)|(((arg__emph_bc) & 0x7)<<5)), _reg7(((arg__VREF_DAC) & 0x3f)|(((arg__VrefLow) & 0x3)<<6)), _reg8(((arg__TPS_tcomp) & 0x1)|(((arg__TPS_MUX) & 0xf)<<1)|(((arg__RO_Monost) & 0x7)<<5)), _reg9(((arg__TPS_GR) & 0xf)|(((arg__S2D0_GR) & 0xf)<<4)), _reg10(((arg__PP_OCB_S2D) & 0x1)|(((arg__OCB) & 0x7)<<1)|(((arg__Monost) & 0x7)<<4)|(((arg__fastPP_enable) & 0x1)<<7)), _reg11(((arg__Preamp) & 0x7)|(((arg__Pixel_CB) & 0x7)<<3)|(((arg__Vld1_b) & 0x3)<<6)), _reg12(((arg__S2D_tcomp) & 0x1)|(((arg__Filter_DAC) & 0x3f)<<1)|(((arg__testLVDTransmitter) & 0x1)<<7)), _reg13(((arg__tc) & 0x3)|(((arg__S2D) & 0x7)<<2)|(((arg__S2D_DAC_Bias) & 0x7)<<5)), _reg14(((arg__TPS_tcDAC) & 0x3)|(((arg__TPS_DAC) & 0x3f)<<2)), _reg15(((arg__S2D0_tcDAC) & 0x3)|(((arg__S2D0_DAC) & 0x3f)<<2)), _reg16(((arg__testBE) & 0x1)|(((arg__is_en) & 0x1)<<1)|(((arg__DelEXEC) & 0x1)<<2)|(((arg__DelCCKreg) & 0x1)<<3)|(((arg__RO_rst_en) & 0x1)<<4)|(((arg__SLVDSbit) & 0x1)<<5)|(((arg__FELmode) & 0x1)<<6)|(((arg__CompEnOn) & 0x1)<<7)), _reg17(((arg__RowStart) & 0x1ff)), _reg18(((arg__RowStop) & 0x1ff)), _reg19(((arg__ColumnStart) & 0x7f)), _reg20(((arg__ColumnStop) & 0x7f)), _reg21(((arg__chipID) & 0xffff)), _reg22(((arg__S2D1_GR) & 0xf)|(((arg__S2D2_GR) & 0xf)<<4)), _reg23(((arg__S2D3_GR) & 0xf)|(((arg__trbit) & 0x1)<<4)), _reg24(((arg__S2D1_tcDAC) & 0x3)|(((arg__S2D1_DAC) & 0x3f)<<2)), _reg25(((arg__S2D2_tcDAC) & 0x3)|(((arg__S2D2_DAC) & 0x3f)<<2)), _reg26(((arg__S2D3_tcDAC) & 0x3)|(((arg__S2D3_DAC) & 0x3f)<<2))
//{
//}
//Config10kaV1::Config10kaV1(uint32_t arg__version, uint32_t arg__usePgpEvr, uint32_t arg__evrRunCode, uint32_t arg__evrDaqCode, uint32_t arg__evrRunTrigDelay, uint32_t arg__epixRunTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicPPmatToReadout, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint32_t arg__adcPipelineDelay0, uint32_t arg__adcPipelineDelay1, uint32_t arg__adcPipelineDelay2, uint32_t arg__adcPipelineDelay3, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__carrierId0, uint32_t arg__carrierId1, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfReadableRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__calibrationRowCountPerASIC, uint32_t arg__environmentalRowCountPerASIC, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint32_t arg__enableAutomaticRunTrigger, uint32_t arg__numberOf125MhzTicksPerRunTrigger, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::Asic10kaConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray, const uint8_t* arg__calibPixelConfigArray)
//    : _version(arg__version), _usePgpEvr(arg__usePgpEvr), _evrRunCode(arg__evrRunCode), _evrDaqCode(arg__evrDaqCode), _evrRunTrigDelay(arg__evrRunTrigDelay), _epixRunTrigDelay(arg__epixRunTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicPPmatToReadout(arg__asicPPmatToReadout), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _adcPipelineDelay0(arg__adcPipelineDelay0), _adcPipelineDelay1(arg__adcPipelineDelay1), _adcPipelineDelay2(arg__adcPipelineDelay2), _adcPipelineDelay3(arg__adcPipelineDelay3), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _carrierId0(arg__carrierId0), _carrierId1(arg__carrierId1), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfReadableRowsPerAsic(arg__numberOfReadableRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _calibrationRowCountPerASIC(arg__calibrationRowCountPerASIC), _environmentalRowCountPerASIC(arg__environmentalRowCountPerASIC), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _enableAutomaticRunTrigger(arg__enableAutomaticRunTrigger), _numberOf125MhzTicksPerRunTrigger(arg__numberOf125MhzTicksPerRunTrigger), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
//{
//  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
//    ptrdiff_t offset = 188;
//    Epix::Asic10kaConfigV1* data = reinterpret_cast<Epix::Asic10kaConfigV1*>(((char*)this)+offset);
//    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
//  }
//  if (arg__asicPixelConfigArray and (( this->numberOfRows())*( this->numberOfColumns()))) {
//    ptrdiff_t offset = 188+(104*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
//    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
//    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(( this->numberOfRows())*( this->numberOfColumns())), data);
//  }
//  if (arg__calibPixelConfigArray and (( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow()))) {
//    ptrdiff_t offset = (188+(104*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(2*(( this->numberOfRows())*( this->numberOfColumns())));
//    uint8_t* data = reinterpret_cast<uint8_t*>(((char*)this)+offset);
//    std::copy(arg__calibPixelConfigArray, arg__calibPixelConfigArray+(( this->numberOfCalibrationRows()  / 2 )*( this->numberOfPixelsPerAsicRow()*this->numberOfAsicsPerRow())), data);
//  }
//}
std::vector<int>
Config10kaV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
} // namespace Epix
} // namespace Pds
